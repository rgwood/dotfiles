#!/usr/bin/env -S uv run --script --quiet
# /// script
# requires-python = ">=3.12"
# dependencies = [
# ]
# ///

import os
import sys
import zipfile
from pathlib import Path


def unzip_file(zip_path):
    """
    Unzip a file in the current working directory while preserving directory structure.
    
    Args:
        zip_path: Path to the zip file to extract
    """
    try:
        with zipfile.ZipFile(zip_path, 'r') as zip_ref:
            # Print info about what's being extracted
            print(f"Extracting: {zip_path}")
            
            # Extract all contents to current directory
            # This already preserves the internal directory structure
            # without adding the zip filename as a parent directory
            zip_ref.extractall()
            
            # Count files extracted
            file_count = len(zip_ref.namelist())
            print(f"Successfully extracted {file_count} files from {zip_path}")
            
    except zipfile.BadZipFile:
        print(f"Error: {zip_path} is not a valid zip file", file=sys.stderr)
        return False
    except Exception as e:
        print(f"Error extracting {zip_path}: {str(e)}", file=sys.stderr)
        return False
    
    return True


def main():
    # Get command line arguments (zip files to extract)
    args = sys.argv[1:]
    
    # If no arguments provided, show usage
    if not args:
        print("Usage: unzip-in-cwd <zipfile1> [zipfile2] [...]")
        print("Extracts zip files in the current working directory.")
        return
    
    # Process each zip file
    success_count = 0
    for zip_path in args:
        path = Path(zip_path)
        if not path.exists():
            print(f"Error: File not found: {zip_path}", file=sys.stderr)
            continue
            
        if not path.is_file():
            print(f"Error: Not a file: {zip_path}", file=sys.stderr)
            continue
            
        if unzip_file(zip_path):
            success_count += 1
    
    # Print summary
    if len(args) > 1:
        print(f"Extraction complete: {success_count}/{len(args)} files processed successfully")


if __name__ == "__main__":
    main()

